1) Priority Inversion Problem
1.
There is another method to solve the priority inversion problem, called "Priority Ceiling Protocol". In this method, each resource is assigned a priority ceiling, which has the value of the highest priority value of any task.
The idea behind this is - when a process approaches a critical section, and obtains a lock for the shared resource, its priority is increased to ensure that it is completed with its task as quickly as possible for the shared resource to be used by another process.
This increase in priority to the priority ceiling can be either done when there is another process in waiting queue or immediately after the acquiring of the lock. Hence, the two approaches associated with this method - Original Ceiling Priority Protocol (OCPP) and Immediate Ceiling Priority Protocol (ICPP).
Reference: https://en.wikipedia.org/wiki/Priority_ceiling_protocol

2.
Test Description:
Consider three writers - writer A, writer B and writer C with priorities 10, 20 and 30.
Being writers, they cannot access the critical section together, hence are the ideal selection for this test.
First we make the lowest process, i.e. writer A (prio 10) acquire the lock and then the highest, i.e writer C (prio 30) tries to acquire it and fails, and then the medium, writer B (prio 20) tries to acquire it and fails. Failing makes them go into PRWAIT state and be present in the waiting queue for the lock.

Expected Behaviour:
Using locks, with priority inheritence, we should be able to see a change in the priority of the writer A, according to the highest priority process in its acquired lock's queue.
Using semaphores, without priority inheritence, we should be able to see that the priority of the writer A, remains the same.

OUTPUT:
The following is the obtained output from the task1.c testing.
TASK1:
Testing Semphores...
-start writer 3, then sleep 1s. Sem granted to Writer A (prio 10)
  A: to acquire sem
  A: acquired sem, sleep 1s
Priority of writer:10
-start writer 3, then sleep 1s. Writer C (prio 30) blocked on the lock
  C: to acquire sem
Priority of writer:10
-start writer 3, then sleep 1s. Writer B (prio 20) blocked on the lock
  B: to acquire sem
Priority of writer:10
Semaphore Testing OK

Testing current Locks...
-start writer 3, then sleep 1s. Lock granted to Writer A (prio 10)
  A: to acquire lock
  A: acquired lock, sleep 1s
Priority of writer:10
-start writer 3, then sleep 1s. Writer C (prio 30) blocked on the lock
  C: to acquire lock
  A: to release sem
  C: acquired sem, sleep 1s
Priority of writer:30
-start writer 2, then sleep 1s. Writer B (prio 20) blocked on the lock
  B: to acquire lock
Priority of writer:30
Lock Testing OK

As, it can be seen, the priority of the writer A does not change when using semaphore and changes when using locks.
So, when using semaphores,  if the writer A of priority 10 had not released the semaphore, the write B and writer C would have likely starved till write A is done. As, writer A is of lower priority, this gives rise to priority inversion.
While, using the locks, as it can be seen, the priority of the writer A has increased to writer C's priority (30) when writer C is in the waiting queue. This is due to the Priority Inheritence that is being used. This makes sure that the process Writer A finishes its task much quicker and the processes writer B and writer C can get into the critical section faster.


2)
Important points to notice before the analysis-
1. Multiple reader threads can execute the code by calling do_update function.
2. There are two critical sections in the code. 
    a) try_update() call in do_update - uses Locks. But multiple readers can run as mentioned in the above point.
    b) buffer_add(...) call in try_update - ues Counting Semaphore.
3. A counting semaphore is being used, initialized to 10. This means that there can be 10 threads at most running the buffer_add(...) function at a time.

From the above we can say that there is a high possibility of concurrency issues with multiple reader threads running the code at a time.
For example, consider a scenario where there are two readers - 'Reader1' and 'Reader2'.
Reader1-
  If the reader1 reaches the line 'szlen = get_string_from_time(bufstr, sizeof(bufstr), newtime);'
  This gives ensures that the Reader1 has already calculated the time. Let's call that 'time1'.
  Now, reader1 gets descheduled without adding the time1 in the buffer and results in scheduling of reader2.
  
Reader2-
  Consider that the reader2 executes all the way through. This calculates the time as well and adds it in the buffer. Let us call that 'time2'.
  Deschedules as the task is over rescheduling reader1 again.

Reader1-
  Now, reader calls the buffer_add(...) which it could not call earlier, and adds 'time1' to the buffer now.
  
From the above series of executions, we have the buffer with time2 first, and then time1. But it was supposed to be time1 and then time2, in order.
Hence, the issue in the given pseudo code is that we cannot ensure that the times will be added in the buffer in series.

Note:
I have discussed the questions with Vinayak Dubey and Archit Kwatra. I have just discussed the problems and not the solutions.